# creates the nice .html page
# assumes that pdftowordcloud.py, pdftothumbs.py and scrape.py were already run

import cPickle as pickle
from numpy import argmax

# load the pickle of papers scraped from the HTML page (result of scrape.py)
paperdict = pickle.load(open( "papers.p", "rb" ))
print "Loaded %d papers from papers.p (generated by scrape.py)" % (len(paperdict), )

# load the top word frequencies (result of pdftowordcloud.py)
topdict = pickle.load(open("topwords.p", "rb"))
print "Loaded %d entries from topwords.p (generated by pdftowordcloud.py)" % (len(topdict), )

# load LDA words and invert their dictionary list
(ldak, phi, voca) = pickle.load(open("ldaphi.p", "rb"))
wtoid = {}
for i,w in enumerate(voca):
	wtoid[w] = i

# build up the string
html = open("nipsnice_template.html", "r").read()
s = ""
js = "ldadist=["
for pid, p in enumerate(paperdict):

	# get title, author
	title, author = paperdict[p]

	# create the tags string
	topwords = topdict.get(p, [])
	# some top100 words may not have been computed during LDA so exclude them if
	# they aren't found in wtoid
	t = [x[0] for x in topwords if x[0] in wtoid] 
	tid = [int(argmax(phi[:, wtoid[x]])) for x in t] # assign each word to class
	tcat = ""
	nums = [0 for k in range(ldak)] # holds counts for this paper of each class
	for k in range(ldak):
		ws = [x for i,x in enumerate(t) if tid[i]==k]
		nums[k] = 1 + len(ws)
		tcat += '[<span class="t'+ `k` + '">' + ", ".join(ws) + '</span>] '
	ss = 1.0*sum(nums)
	nums = ["%.2f" % (x/ss,) for x in nums]

	# get path to thumbnails for this paper
	thumbpath = "thumbs/NIPS2012_%s.pdf.jpg" % (p, )

	# get links to PDF, supplementary and bibtex on NIPS servers
	pdflink = "http://books.nips.cc/papers/files/nips25/NIPS2012_%s.pdf" % (p, )
	bibtexlink = "http://books.nips.cc/papers/files/nips25/bibhtml/NIPS2012_%s.html" % (p, )
	supplink = "http://books.nips.cc/papers/files/nips25/NIPS2012_%s.extra.zip" % (p, )

	s += """

	<div class="apaper" id="pid%d">
	<div class="paperdesc">
		<span class="ts">%s</span><br />
		<span class="as">%s</span><br /><br />
	</div>
	<div class="dllinks">
		<a href="%s">[pdf] </a>
		<a href="%s">[bibtex] </a>
		<a href="%s">[supplementary]<br /></a>
	</div>
	<img src = "%s"><br />
	<span class="tt">%s</span>
	</div>

	""" % (pid, title, author, pdflink, bibtexlink, supplink, thumbpath, tcat)

	js += "[" + ",".join(nums) + "]"
	if not pid == len(paperdict)-1: js += ","

newhtml = html.replace("RESULTTABLE", s)

js += "]"
newhtml = newhtml.replace("LOADDISTS", js)

f = open("nipsnice.html", "w")
f.write(newhtml)
f.close()

